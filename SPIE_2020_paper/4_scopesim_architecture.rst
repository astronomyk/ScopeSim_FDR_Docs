ScopeSim Architecture
---------------------

In order to work as a multi-purpose optical* instrument simulator, ScopeSim needs to be able to handle (at least) the two main types of instruments: imagers and spectrographs.

* Footnote: Optical refers to the wavelength ranges where telescopes act as "photon buckets" and detectors are in essence "photon counters".
In other words, from the near ultraviolet (0.1um) to the mid infrared (~30um).
While every instrument is unique, all instruments, by virtue of their astronomical nature, have several key aspects in common.
All instruments:

- transport incoming photons through an optical system towards a detector (array),
- use a limited number of optical components, e.g: mirrors, lenses, and gratings,
- are only a single element in a combined optical train, which includes the atmosphere, telescope, and relay optics,
- introduce a series of optical aberrations depending on the configuration of the optical system,
- are generally built to behave in a predictable and repeatable manner.

These 5 points are important to recognise, as they have the following consequences:

- each optical element is responsible for one or more optical aberrations, which are not dependent on the aberrations inherent to the other optical elements,
- the effect of each aberration on the spatial and spectral distribution of photons remains constant for a given optical configuration,
- this constancy means the characteristics of these effects need only be calculated once and can be described by an analytical function, or an empirical data set,
- common elements (e.g. telescopes, atmospheres, etc.) of complex optical trains can be re-used with different instruments to create new combined optical systems.

This list of consequences implies that the final observed image from a telescope/instrument optical system is simply the sum of a discrete number of independent optical effects repositioning the incoming photons on the focal plane.

While this conclusion may seem obvious and trivial, by using it as the basis for scopesim, it has allowed us to design and build a flexible, lightweight, general purpose instrument simulator that is capable of simulating the majority of current and future optical astronomical instruments.
ScopeSim is able to mimic the optical aberrations seen in imagers, long-slit and multi-object spectrographs, as well as integral field spectrographs.
The architecture could also theoretically be used to simulate high contrast and high time resolution imagers, however these systems have not yet been tested.


Simulation workflow
++++++++++++

The main ScopeSim engine architecture is based around 5 major python classes:

- **Source**: holds a spectro-spatial description of the on-sky target.
- **FieldOfView**: extracts quasi-monochromatic flux maps from a Source object and projects these into focal plane coordinates.
- **ImagePlane**: mimics the focal plane and acts like a 2D canvas for collecting the flux maps held in the FieldOfView objects.
- **DetectorArray**: mimics the functionality of the instrument Detector array in converting the final expectation flux image from the ImagePlane into FITS format pixel maps similar to those delivered by the systems read-out electronics.
- **Effect**: the interface base class for introducing spectral and spatial aberrations into the final flux map.


.. figure:: ../images/Workflow.png

    An illustration of the connections between the main internal classes in ScopeSim: Source, FieldOfView, ImagePlane, DetectorArray.
    The upper panels show the work flow for imaging simulations.
    The lower panels show the work flow for spectroscopy simulations.
    The work flow is in principle the same for both types of simulation.
    (A, E) Both modes require a 2+1D description of the on-sky target(s) containing linked spatial (2D) and spectral (1D) information.
    The main difference lies in how and where the spatial and spectral borders for each of FieldOfView objects are set.
    FieldOfView objects (B, E) extract (2D) integrated photon maps from the Source object(s) and project these onto an ImagePlane objects, which creates a normalised expectation image, similar to what happens at the detector focal plane in a real instrument.
    The DetectorArray (D, H) extracts the regions of the ImagePlane that each detector would see.
    Simulation output in both imaging and spectroscopic cases is the same: A FITS file with detector read images in the same format as generated by the real instrument.



Figure \ref{fig:workflow} illustrates how the first 4 of these classes interact with each other.

The Source objects (A, E) are supplied by the user.
These contain a 2+1D description of the on-sky target(s).
The spatial (2D) information is stored either as tables (collection of point sources) or as ImageHDU objects (for extended objects).
Each of the spatial ``fields`` must be accompanied by one or more unique spectrum.
There need not be a one-to-one relationship between the spatial and spectral inputs.
Multiple spatial fields can reference a single spectrum.
In doing so, ScopeSim can vastly reduce the amount of data that needs to be processed.
For example, a star cluster will contain many thousands of point sources.
However only several tens of spectra are needed to adequately describe all the stars in the cluster.
There will be many hundreds of M-type stars that can reference a single common M-type stellar spectrum.

ScopeSim builds a model of the optical train by importing instrument packages.
Based on the information in these packages, ScopeSim will then generate a series of FieldOfView objects.
Each of these objects





(A, E): For both instrument types the description of the on-sky targets (Sources) contains a list of spatial components and a list of the associated spectra.
(B, F): Imaging simulations cont





- Source
- Fov
- ImagePlane
- Detector

Effects Objects
+++++++++++++++

.. figure:: ../images/Effects.png

- Effects
- Effects contained in ScopeSim
- Building custom Effects

Controlling
- yaml files